View(gSim)
hist(gSim[,1])
hist(gSim[,1],freq=FALSE)
hist(gSim[,1],freq=FALSE,main="Randomization distribution for t statistic",xlab="t statistic")
hist(gSim[,2],freq=FALSE,main="Randomization distribution for ks statistic",xlab="ks statistic")
hist(gSim[,3],freq=FALSE,main="Randomization distribution for max variance ratio statistic",xlab="max variance ratio statistic")
hist(gSim[,1],freq=FALSE,main="Randomization distribution for t statistic",xlab="t statistic")
abline(v=p.tstat,col="red")
hist(gSim[,2],freq=FALSE,main="Randomization distribution for ks statistic",xlab="ks statistic")
abline(v=p.ks, col="red")
hist(gSim[,3],freq=FALSE,main="Randomization distribution for max variance ratio statistic",xlab="max variance ratio statistic")
abline(v=p.maxvar, col="red")
temp <- gSim[,1]
temp <- temp[>p.tstat]
temp <- temp[temp>p.tstat]
temp <- temp[temp>p.tstat]
temp <- gSim[,1]
temp <- temp > p.tstat
temp <- sum(temp)/length(temp)
temp <- gSim[,1]> p.tstat
temp <- sum(gSim[,1]> p.tstat)/length(gSim[,1])
p.rtstat <- sum(gSim[,1]> p.tstat)/length(gSim[,1])
p.rks <- sum(gSim[,2]> p.ks)/length(gSim[,2])
p.rmaxvar <- sum(gSim[,3]> p.maxvar)/length(gSim[,3])
choose(3,6)
choose(6,3)
all.combinations <- combn(6,3)
View(all.combinations)
View(all.combinations)
x <- c(rep("R",3),rep("N",3))
y <- c(256,159,149,54,123,248)
n.combs <- choose(6,3)
x <- c(rep("R",3),rep("N",3))
y <- c(256,159,149,54,123,248)
n.combs <- choose(6,3)
all.combinations <- combn(6,3)
g.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
g.null[i] <- abs(mean(y[A.indices])-mean(y[-A.indices]))
}
g.obs <- abs(mean(y[x=="N"])-mean(y[x=="R"]))
mean(g.null>=g.obs)
hist(g.null)
g.tstat <- function (yA, yB) {
abs(t.test(yA,yB,var.equal = TRUE)$stat)
}
y[c(1,2,3)]
t.obs <- g.tstat(y[c(4,5,6)],y[c(1,2,3)])
t.obs <- unname(g.tstat(y[c(4,5,6)],y[c(1,2,3)]))
t.obs <- unname(g.tstat(y[c(4,5,6)],y[c(1,2,3)]))
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
t.null[i] <- unname(g.tstat(y[A.indices],y[-A.indices]))
}
t.obs <- unname(g.tstat(y[c(4,5,6)],y[c(1,2,3)]))
t.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
t.null[i] <- unname(g.tstat(y[A.indices],y[-A.indices]))
}
mean(t.null>=t.obs)
hist(t.null)
x <- c(rep("R",3),rep("N",3))
y <- c(256,159,149,54,123,248)
g.obs <- abs(mean(y[x=="N"])-mean(y[x=="R"]))
n.combs <- choose(6,3)
all.combinations <- combn(6,3)
g.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
g.null[i] <- abs(mean(y[A.indices])-mean(y[-A.indices]))
}
mean(g.null>=g.obs)
hist(g.null)
#Part b
t.obs <- unname(g.tstat(y[c(4,5,6)],y[c(1,2,3)]))
t.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
t.null[i] <- unname(g.tstat(y[A.indices],y[-A.indices]))
}
mean(t.null>=t.obs)
hist(t.null)
g.tstat <- function (yA, yB) {
abs(t.test(yA,yB,var.equal = TRUE)$stat)
}
x <- c(rep("R",3),rep("N",3))
y <- c(256,159,149,54,123,248)
g.obs <- abs(mean(y[x=="N"])-mean(y[x=="R"]))
n.combs <- choose(6,3)
all.combinations <- combn(6,3)
g.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
g.null[i] <- abs(mean(y[A.indices])-mean(y[-A.indices]))
}
mean(g.null>=g.obs)
hist(g.null)
#Part b
t.obs <- unname(g.tstat(y[c(4,5,6)],y[c(1,2,3)]))
t.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
t.null[i] <- unname(g.tstat(y[A.indices],y[-A.indices]))
}
mean(t.null>=t.obs)
hist(t.null)
a.data <- read.table(file="C:\\Users\\shwan_000\\OneDrive\\Documents\\Classes\\STATS 502\\HW2\\bact.dat",
header=TRUE)
a.data <- read.table(file="C:\\Users\\shwan_000\\OneDrive\\Documents\\Classes\\STATS 502\\HW2\\bact.dat",
header=TRUE)
summary(a.data)
#Standard deviation high
sd(a.data[,1])
#Standard deviation low
sd(a.data[,2])
high.ordered <- cumsum(a.data[,1])
low.ordered <- cumsum(a.data[,2])
n <- 1:25
plot(n,high.ordered/max(high.ordered),type='S', ylim = c(0, 1),col=2,xlab="y",ylab="F(y)",main="CDFs for high and low")
lines(n,low.ordered/max(low.ordered),type='S', ylim = c(0, 1),col=3)
legend("topleft", c("High","Low"),col=c("red","green"),lty=1)
#Part b
#Part i
g.tstat <- function (yA, yB) {
abs(t.test(yA,yB,var.equal = TRUE)$stat)
}
g.ks <- function(yA,yB) { ks.test(yA,yB)$stat}
g.maxvar <- function(yA,yB) {
max(var(yA)/var(yB),var(yB)/var(yA))
}
p.tstat <- unname(g.tstat(high.ordered,low.ordered))
p.ks <- unname(g.ks(high.ordered,low.ordered))
p.maxvar <- unname(g.maxvar(high.ordered,low.ordered))
#Part ii
y <- c(a.data[,1],a.data[,2])
x <- c(rep("H",25),rep("L",25))
gSim <- NULL
for (s in 1:1e4) {
xsim <- sample(x)
yAsim <- y[xsim=='H']
yBsim <- y[xsim=='L']
g1 <- unname(g.tstat(yAsim, yBsim))
g2 <- unname(g.ks(yAsim,yBsim))
g3 <- g.maxvar(yAsim, yBsim)
gSim <- rbind(gSim, c(g1, g2, g3))
}
hist(gSim[,1],freq=FALSE,main="Randomization distribution for t statistic",xlab="t statistic")
abline(v=p.tstat,col="red")
hist(gSim[,2],freq=FALSE,main="Randomization distribution for ks statistic",xlab="ks statistic")
abline(v=p.ks, col="red")
hist(gSim[,3],freq=FALSE,main="Randomization distribution for max variance ratio statistic",xlab="max variance ratio statistic")
abline(v=p.maxvar, col="red")
#Part iii
p.rtstat <- sum(gSim[,1]> p.tstat)/length(gSim[,1])
p.rks <- sum(gSim[,2]> p.ks)/length(gSim[,2])
p.rmaxvar <- sum(gSim[,3]> p.maxvar)/length(gSim[,3])
a.data <- read.table(file="C:\\Users\\shwan_000\\OneDrive\\Documents\\Classes\\STATS 502\\HW2\\bact.dat",
header=TRUE)
summary(a.data)
#Standard deviation high
sd(a.data[,1])
#Standard deviation low
sd(a.data[,2])
high.ordered <- cumsum(a.data[,1])
low.ordered <- cumsum(a.data[,2])
n <- 1:25
plot(n,high.ordered/max(high.ordered),type='S', ylim = c(0, 1),col=2,xlab="y",ylab="F(y)",main="CDFs for high and low")
lines(n,low.ordered/max(low.ordered),type='S', ylim = c(0, 1),col=3)
legend("topleft", c("High","Low"),col=c("red","green"),lty=1)
#Part b
#Part i
g.tstat <- function (yA, yB) {
abs(t.test(yA,yB,var.equal = TRUE)$stat)
}
g.ks <- function(yA,yB) { ks.test(yA,yB)$stat}
g.maxvar <- function(yA,yB) {
max(var(yA)/var(yB),var(yB)/var(yA))
}
p.tstat <- unname(g.tstat(high.ordered,low.ordered))
p.ks <- unname(g.ks(high.ordered,low.ordered))
p.maxvar <- unname(g.maxvar(high.ordered,low.ordered))
#Part ii
y <- c(a.data[,1],a.data[,2])
x <- c(rep("H",25),rep("L",25))
gSim <- NULL
for (s in 1:1e4) {
xsim <- sample(x)
yAsim <- y[xsim=='H']
yBsim <- y[xsim=='L']
g1 <- unname(g.tstat(yAsim, yBsim))
g2 <- unname(g.ks(yAsim,yBsim))
g3 <- g.maxvar(yAsim, yBsim)
gSim <- rbind(gSim, c(g1, g2, g3))
}
hist(gSim[,1],freq=FALSE,main="Randomization distribution for t statistic",xlab="t statistic")
abline(v=p.tstat,col="red")
hist(gSim[,2],freq=FALSE,main="Randomization distribution for ks statistic",xlab="ks statistic")
abline(v=p.ks, col="red")
hist(gSim[,3],freq=FALSE,main="Randomization distribution for max variance ratio statistic",xlab="max variance ratio statistic")
abline(v=p.maxvar, col="red")
t.test(yAsim,yBsim,var.equal = TRUE)
t.test(yAsim,yBsim,var.equal = TRUE)$stat
t.test(yAsim,yBsim,var.equal = TRUE)$stat
temp <- t.test(yAsim,yBsim,var.equal = TRUE)
temp
temp$p.value
a.data <- read.table(file="C:\\Users\\shwan_000\\OneDrive\\Documents\\Classes\\STATS 502\\HW2\\bact.dat",
header=TRUE)
summary(a.data)
#Standard deviation high
sd(a.data[,1])
#Standard deviation low
sd(a.data[,2])
high.ordered <- cumsum(a.data[,1])
low.ordered <- cumsum(a.data[,2])
n <- 1:25
plot(n,high.ordered/max(high.ordered),type='S', ylim = c(0, 1),col=2,xlab="y",ylab="F(y)",main="CDFs for high and low")
lines(n,low.ordered/max(low.ordered),type='S', ylim = c(0, 1),col=3)
legend("topleft", c("High","Low"),col=c("red","green"),lty=1)
g.tstat <- function (yA, yB) {
abs(t.test(yA,yB,var.equal = TRUE)$stat)
}
g.ks <- function(yA,yB) { ks.test(yA,yB)$stat}
g.maxvar <- function(yA,yB) {
max(var(yA)/var(yB),var(yB)/var(yA))
}
p.tstat <- unname(g.tstat(high.ordered,low.ordered))
p.ks <- unname(g.ks(high.ordered,low.ordered))
p.maxvar <- unname(g.maxvar(high.ordered,low.ordered))
#Part ii
y <- c(a.data[,1],a.data[,2])
x <- c(rep("H",25),rep("L",25))
gSim <- NULL
for (s in 1:1e4) {
xsim <- sample(x)
yAsim <- y[xsim=='H']
yBsim <- y[xsim=='L']
g1 <- unname(g.tstat(yAsim, yBsim))
g2 <- unname(g.ks(yAsim,yBsim))
g3 <- g.maxvar(yAsim, yBsim)
gSim <- rbind(gSim, c(g1, g2, g3))
}
hist(gSim[,1],freq=FALSE,main="Randomization distribution for t statistic",xlab="t statistic")
abline(v=p.tstat,col="red")
hist(gSim[,2],freq=FALSE,main="Randomization distribution for ks statistic",xlab="ks statistic")
abline(v=p.ks, col="red")
hist(gSim[,3],freq=FALSE,main="Randomization distribution for max variance ratio statistic",xlab="max variance ratio statistic")
abline(v=p.maxvar, col="red")
#Part iii
p.rtstat <- sum(gSim[,1]> p.tstat)/length(gSim[,1])
p.rks <- sum(gSim[,2]> p.ks)/length(gSim[,2])
p.rmaxvar <- sum(gSim[,3]> p.maxvar)/length(gSim[,3])
#Question 2
#Part a
x <- c(rep("R",3),rep("N",3))
y <- c(256,159,149,54,123,248)
g.obs <- abs(mean(y[x=="N"])-mean(y[x=="R"]))
n.combs <- choose(6,3)
all.combinations <- combn(6,3)
g.null <- numeric(n.combs)
for(i in 1:n.combs){
A.indices <- all.combinations[,i]
g.null[i] <- abs(mean(y[A.indices])-mean(y[-A.indices]))
}
mean(g.null>=g.obs)
hist(g.null)
set.seed(500)
#set.seed(20)
#randomization
x.r <- c(rep("A",50),rep("B",50))
y.r <- rnorm(100,mean=0,sd=1)
p.random <- unname(t.test(y.r[x.r=='A'],y.r[x.r=='B'],var.equal = TRUE)$stat)
p.random10 <- NULL
#n=10
for (s in 1:10) {
xsim <- sample(x.r)
yAsim <- y.r[xsim=='A']
yBsim <- y.r[xsim=='B']
temp <- t.test(yAsim,yBsim,var.equal = TRUE)$stat
p.random10 <- c(p.random10, temp)
}
p.r10 <- mean(p.random10 >= p.random)
p.ttest10 <- t.test(rnorm(5,mean=0,sd=1),rnorm(5,mean=0,sd=1),var.equal = TRUE)$p.value
#n=100
p.random100 <- NULL
p.ttest100 <- NULL
for (s in 1:1e2) {
xsim <- sample(x.r)
yAsim <- y.r[xsim=='A']
yBsim <- y.r[xsim=='B']
temp <- t.test(yAsim,yBsim,var.equal = TRUE)$stat
p.random100 <- c(p.random100, temp)
}
p.r100 <- mean(p.random100 >= p.random)
p.ttest100 <- t.test(rnorm(50,mean=0,sd=1),rnorm(50,mean=0,sd=1),var.equal = TRUE)$p.value
#n=1000
p.random1000 <- NULL
p.ttest1000 <- NULL
for (s in 1:1e3) {
xsim <- sample(x.r)
yAsim <- y.r[xsim=='A']
yBsim <- y.r[xsim=='B']
temp <- t.test(yAsim,yBsim,var.equal = TRUE)$stat
p.random1000 <- c(p.random1000, temp)
}
p.r1000 <- mean(p.random1000 >= p.random)
p.ttest1000 <- t.test(rnorm(500,mean=0,sd=1),rnorm(500,mean=0,sd=1),var.equal = TRUE)$p.value
#n=10000
p.random10000 <- NULL
p.ttest10000 <- NULL
for (s in 1:1e4) {
xsim <- sample(x.r)
yAsim <- y.r[xsim=='A']
yBsim <- y.r[xsim=='B']
temp <- t.test(yAsim,yBsim,var.equal = TRUE)$stat
p.random10000 <- c(p.random10000, temp)
}
p.r10000 <- mean(p.random10000 >= p.random)
p.ttest10000 <- t.test(rnorm(5000,mean=0,sd=1),rnorm(5000,mean=0,sd=1),var.equal = TRUE)$p.value
alpha <- 0.05
n=10
t.crit <- qt(1-alpha/2,2*n-2)
alpha <- 0.05
n <- seq(6,30)
alpha <- 0.05
n <- seq(6,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
pnorm(t.crit, mean=t.gamma)
pnorm(-t.crit, mean=t.gamma)
t.normal.power
t.crit
t.gamma <- .75*sqrt(n)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
alpha <- 0.05
n <- seq(6,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
pnorm(0,mean=40)
pnorm(1,mean=40)
pnorm(40,mean=40)
pnorm(-1,mean=40)
pnorm(-3,mean=40)
qnorm(-3,mean=40)
qnorm(1,mean=40)
pnorm(1,mean=40)
pnorm(100,mean=40)
pnorm(3,mean=40)
pnorm(2,mean=40)
pnorm(35,mean=40)
pnorm(39,mean=40)
dnorm(39,mean=40)
dnorm(2,mean=40)
alpha <- 0.05
n <- seq(6,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(40+t.crit, mean=t.gamma) + pnorm(40-t.crit, mean=t.gamma)
dnorm(2,mean=40)
t.normal.power
alpha <- 0.05
n <- seq(1,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(40+t.crit, mean=t.gamma) + pnorm(40-t.crit, mean=t.gamma)
alpha <- 0.05
n <- seq(3,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(40+t.crit, mean=t.gamma) + pnorm(40-t.crit, mean=t.gamma)
t.normal.power
alpha <- 0.05
n <- seq(3,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(t.crit, mean=t.gamma)
t.normal.power
alpha <- 0.05
n <- seq(3,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- .75*sqrt(n)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(t.crit, mean=t.gamma)
t.normal.power
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- .75*sqrt(n)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(t.crit, mean=t.gamma)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- .75*sqrt(n)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
sqrt(30)
sqrt(30)*.75
4/6*2
4/3
alpha <- 0.05
n <- seq(3,30)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4/3*n
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
samplesize()
t.gamma <- 4*n
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
t.normal.power <- 1 - pt(t.crit, 2*n-2, mean=t.gamma) + pt(-t.crit, 2*n-2, mean=t.gamma)
t.normal.power <- 1 - pt(t.crit, 2*n-2, ncp=t.gamma) + pt(-t.crit, 2*n-2, ncp=t.gamma)
t.normal.power
n <- seq(1,10)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
alpha <- 0.05
n <- seq(2,10)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.normal.power <- 1 - pt(t.crit, 2*n-2, ncp=t.gamma) + pt(-t.crit, 2*n-2, ncp=t.gamma)
t.normal.power
alpha <- 0.05
n <- seq(2,10)
t.crit <- qt(1-alpha/2,2*n-2)
t.gamma <- 4*n
t.power <- 1 - pt(t.crit, 2*n-2, ncp=t.gamma) + pt(-t.crit, 2*n-2, ncp=t.gamma)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
t.power <- 1 - pt(t.crit, 2*n-2, ncp=t.gamma) + pt(-t.crit, 2*n-2, ncp=t.gamma)
t.normal.power <- 1 - pnorm(t.crit, mean=t.gamma) + pnorm(-t.crit, mean=t.gamma)
t.normal.power
t.power
n <- seq(2,30)
y <- rnorm (n,0,10)
pt(.95)
pt(.95,n)
qt(.95,n)
qt(.95,9999999)
dt(.95,9999999)
n <- seq(2,30)
t.crit <- qt(1-alpha/2,n-1)
width <- 2*10/sqrt(n)*t.crit
width
n <- seq(2,100)
t.crit <- qt(1-alpha/2,n-1)
width <- 2*10/sqrt(n)*t.crit
width
plot(width,n)
plot(n,width)
n <- seq(20,100)
t.crit <- qt(1-alpha/2,n-1)
width <- 2*10/sqrt(n)*t.crit
width
plot(n,width)
width
plot(n,width,main="Plot of width of the CI compared to smaple size n")
width
plot(n,width,main="Plot of width of the CI compared to sample size n")
life.expectancy <- read.csv(file="D:\\Program File\\Git\\info201\\a3-using-data-FeardaMeow\\data\\life_expectancy.csv",as.is = TRUE)
is.data.frame(life.expectancy)
life.expectancy$change <- life.expectancy$le_2013 - life.expectancy$le_1960
View(life.expectancy)
View(life.expectancy)
factor(life.expectancy)
factor(life.expectancy$region)
unique(life.expectancy$region)
list(life.expectancy$region)
highest.region <- aggregate(life.expectancy$change,list(life.expectancy$region),mean)
View(highest.region)
max(highest.region)
View(highest.region)
View(highest.region)
max(highest.region$x)
aggregate(life.expectancy$change,list(life.expectancy$region),mean)$x
max(aggregate(life.expectancy$change,list(life.expectancy$region),mean)$x)
which.max(aggregate(life.expectancy$change,list(life.expectancy$region),mean)$x)
highest.region <- aggregate(life.expectancy$change,list(life.expectancy$region),mean)[which.max(aggregate(life.expectancy$change,list(life.expectancy$region),mean)$x),1]
library(data.table)
#Loading in the data
MCMIS <- 'D:\\Program File\\Git\\git_projects\\RA\\MCMIS'
library(data.table)
#Loading in the data
MCMIS <- 'D:\\Program File\\Git\\git_projects\\RA\\MCMIS'
setwd(MCMIS) #location of data
crash.master <- fread('data\\OurCrash.csv', header = T, sep ="auto", sep2 = "auto")
truck.employed <- fread('data\\TruckEmployment.csv', header = T, sep ="auto", sep2 = "auto")
summary(crash.master)
states <- unique(crash.master$REPORT_STATE)
injuries <- NULL
fatalities <- NULL
severity <- NULL
n <- NULL
for (state in states) {
injuries <- c(injuries, sum(crash.master$INJURIES[crash.master$REPORT_STATE == state]))
fatalities <- c(fatalities, sum(crash.master$FATALITIES[crash.master$REPORT_STATE == state]))
severity <- c(severity, mean(crash.master$SEVERITY_WEIGHT[crash.master$REPORT_STATE == state]))
n <- c(n,length(crash.master$FATALITIES[crash.master$REPORT_STATE == state]))
}
df <- data.frame(states, injuries, fatalities, severity, n)
df <- merge(df, truck.employed, by="states")
df$sinjuries <- df$injuries/df$employed
df$sfatalities <- df$fatalities/df$employed
df$sn <- df$n/df$employed
hist(df$injuries,nclass=20)
hist(df$fatalities,nclass=20)
hist(df$severity)
hist(df$n)
hist(df$sinjuries)
hist(df$sfatalities)
hist(df$sn)
View(df)
View(df)
